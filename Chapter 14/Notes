## Structures and other data forms
One of the most important steps in designing a program is choosing a good way to represent
the data. In many cases, a simple variable or even an array is not enough. C takes your ability
to represent data a step further with the C structure variables . The C structure is flexible enough
in its basic form to represent a diversity of data, and it enables you to invent new forms. If you
are familiar with Pascal records, you should be comfortable with structures. If not, this chapter
will introduce you to C structures. Letâ€™s study a concrete example to see why a C structure
might be needed and how to create and use one

### Sample Problem: Creating an Inventory of Books

### Setting Up the Structure Declaration


### Defining a Structure Variable


####  Initializing a Structure

####  Gaining Access to Structure Members

####  Initializers for Structures


### Arrays of Structures

####  Declaring an Array of Structures

####  Identifying Members of an Array of Structures

####  Program Discussion

### Nested Structures

### Pointers to Structures

####  Declaring and Initializing a Structure Pointer

####  Member Access by Pointer



### Telling Functions About Structures

####  Passing Structure Members

####  Using the Structure Address

####  Passing a Structure as an Argument

####  More on Structure Features

####  Structures or Pointer to Structures?

####  Character Arrays or Character Pointers in a Structure

####  Structure, Pointers, and malloc()

####  Compound Literals and Structures (C99)

####  Flexible Array Members (C99)

####  Anonymous Structures (C11)

####  Functions Using an Array of Structures

### Saving the Structure Contents in a File

#### A Structure-Saving Example


#### Program Points

### Structures: What Next?

### Unions: A Quick Look

####  Using Unions

####  Anonymous Unions (C11)

### Enumerated Types


####  enum Constants

####  Default Values

####  Assigned Values

####  enum Usage

#### Shared Namespaces

### typedef: A Quick Look

### Fancy Declarations

### Functions and Pointers

### Key Concepts

### Summary

### 

### 



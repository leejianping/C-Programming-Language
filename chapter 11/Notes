
## **chapter 11  character strings and string functions**

This chapter discusses the nature of strings, how to declare and initialize strings, 
how to get them into and out of programs, and how to manipulate strings.

### Representing Strings and String I/O
1. A character string is a char array terminated with a null character (\0)

2. The puts() function, like printf() , belongs to the the stdio.h family of input/output functions.
It only displays strings, and, unlike printf() , it automatically appends a newline to the
string it displays.

#### Defining strings with a program

The principal ways to define a string are using string constants, usning char arrays and using char pointers.

##### character string literals (string constants)

1. A string literal, also termed a string constant, is anything enclosed in double quotation marks.
The enclosed characters, plus a terminating \0 character automatically provided by the compiler,
are stored in memory as a character string. 

   Eg:
      " I am a symbolic string constant"     (display)
      " I am a symbolic string constant\0"   (store in memory)

2. C concatenates string literals if they are seperated by nothing or by whitespace.

    Eg: 
       char greeting[50] = "Hello, and"" how are"    " you"" today!";
       is equivalent to this:
       char greeting[50] = "Hello, and how are you today!";
       
3. If you want to use a double quotation mark within a string, precede the quotation mark with a
   backslash, as follows:
   
     printf("\"Run, Spot, run!\" exclaimed Dick.\n");
     This produces the following output:
     "Run, Spot, run!" exclaimed Dick.
 
 
       
    



